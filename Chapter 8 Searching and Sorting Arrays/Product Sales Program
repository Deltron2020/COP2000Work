// This program produces a sales report for DLC, INC
#include <iostream>
#include <iomanip>
using namespace std;

// Function Prototypes
void calcSales(const int[], const double[], double[], int);
void showOrder(const double[], const int[], int);
void dualSort(int[], double[], int);
void showTotals(const double[], const int[], int);
void swap(double &, double &);
void swap(int &, int &);

int main()
{
    // NUM_PRODS is the number of products produced
    const int NUM_PRODS = 9;

    // Array with id numbers
    int id[NUM_PRODS] = { 914, 915, 916, 917, 918,
                          919, 920, 921, 922 };

    // Array with number of units sold for each product
    int units[NUM_PRODS] = { 842, 416, 127, 514, 437, 
                             269, 197, 492, 212 };

    // Array with product prices
    double prices[NUM_PRODS] = { 12.95, 14.95, 18.95, 16.95, 21.95,
                                 31.95, 14.95, 14.95, 16.95 };
                      
    // Array to hold the computed sales amounts
    double sales[NUM_PRODS];

    // Calculate each product's sales
    calcSales(units, prices, sales, NUM_PRODS);

    // Sort the elements in the array in descending order
    // and shuffle the ID numbers in the ID array
    // to keep them in parallel
    dualSort(id, sales, NUM_PRODS);

    // Set the numeric output formatting
    cout << fixed << showpoint << setprecision(2);

    // Display the products and sales amounts
    showOrder(sales, id, NUM_PRODS);

    // Display the total units sold and total sales
    showTotals(sales, units, NUM_PRODS);
    return 0;
}

// Define the calcSales function
void calcSales(const int units[], const double prices[], double sales[], int num)
{
    for (int index = 0; index < num; index++)
        sales[index] = units[index] * prices[index];
}

// Define the dualSort function
void dualSort(int id[], double sales[], int size)
{
    int start, maxIndex, tempId;
    double maxValue;

    for (start = 0; start < (size - 1); start++)
    {
        maxIndex = start;
        maxValue = sales[start];
        tempId = id[start];
        for (int index = start + 1; index < size; index++)
        {
            if (sales[index] > maxValue)
            {
                maxValue = sales[index];
                tempId = id[index];
                maxIndex = index;
            }
        }
        swap(sales[maxIndex],sales[start]);
        swap(id[maxIndex],id[start]);
    }
}

// Define the double swap function

void swap(double &a, double &b)
{
    double temp = a;
    a = b;
    b = temp;
}

// Define the int swap function

void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}

// Define the showOrder function
void showOrder(const double sales[], const int id[], int num)
{
    cout << "Product Number\tSales\n";
    cout << "------------------------------------\n";
    for (int index = 0; index < num; index++)
    {
        cout << id[index] << "\t\t\t\t$";
        cout << setw(8) << sales[index] << endl;
    }
    cout << endl;
}

// Define the showTotal function
void showTotals(const double sales[], const int units[], int num)
{
    int totalUnits = 0;
    double totalSales = 0.0;
    
    for (int index = 0; index < num; index++)
    {
        totalUnits += units[index];
        totalSales += sales[index];
    }
    cout << "Total Units Sold:  \t" << totalUnits << endl;
    cout << "Total Sales:    \t$" << totalSales << endl;
}