// This program demonstrates how to sort and search a 
// string vector using selection sort and binary search
#include <iostream>
#include <string>
#include <vector>
using namespace std;

// Function Prototypes
void selectionSort(vector<string>&);
void swap(string &, string &);
int binarySearch(const vector <string>&, string);

int main()
{
    string searchValue;       // Value to search for
    int position;             // Position of found value

    // Define the vector of strings
    vector<string> names { "Lopez", "Smith", "Pike", "Jones",
                           "Abernathy", "Hall", "Wilson", "Kimura",
                           "Alvarado", "Harrison", "Geddes", "Irvine" };

    // Sort the Vector
    selectionSort(names);

    // Display the vector's element
    cout << "Here are the sorted names: \n";
    for (auto element : names)
        cout << element << endl;
    cout << endl;

    // Search for a name
    cout << "Enter a name to search for: ";
    getline(cin, searchValue);
    position = binarySearch(names, searchValue);

    // Display the results
    if (position != -1)
        cout << "That name is found at position " << position << endl;
    else
        cout << "That name is not found.\n";

    return 0;
}

// Define the selectionSort function

void selectionSort(vector<string> &v)
{
    int minIndex;
    string minValue;

    for (int start = 0; start < (v.size() - 1); start++)
    {
        minIndex = start;
        minValue = v[start];
        for (int index = start + 1; index < v.size(); index++)
        {
            if (v[index] < minValue)
            {
                minValue = v[index];
                minIndex = index;
            }
        }
        swap(v[minIndex],v[start]);
    }
}

// Define the swap function 
void swap(string &a, string &b)
{
    string temp = a;
    a = b;
    b = temp;
}

// Define the binarySearch function

int binarySearch(const vector<string> &v, string str)
{
    int first = 0,            // first vector element
        last = v.size() - 1,  // Last vector element
        middle,               // Mid point of search
        position = -1;        // Position of search value

    bool found = false;       // Flag variable

    while (!found && first <= last)
    {
        middle = (first + last) / 2;      // Calculate mid point
        if (v[middle] == str)             // If value is found at mid
        {
            found = true;
            position = middle;
        }
        else if (v[middle] > str)         // If the value is in the lower half
            last = middle - 1;
        else
            first = middle + 1;           // If the value is in the upper half 
    }
    return position;
}