// This program demonstrates a unique_ptr pointing
// to a dynamically allocated array of integers
// Using smart pointers automatically deletes a chunk of dynamically allocated memory
// when the memory is no longer being used, helping to prevent memory leaks
#include <iostream>
#include <memory>   // needed for smart pointers
using namespace std;

int main()
{
    int max;        // Max size of the array

    // Get the number of values to store
    cout << "How many numbers do you want to enter? ";
    cin >> max;

    // Define a unique_ptr smart pointer, pointing to
    // a dynamically allocated array of ints
    unique_ptr<int[]> ptr ( new int[max]);

    // Get values for the array
    for (int index = 0; index < max; index++)
    {
        cout << "Enter an integer number: ";
        cin >> ptr[index];
    }     

    // Display the values in the array
    cout << "here are the values you entered:\n";
    for (int index = 0; index < max; index++)
        cout << ptr[index] << endl;

    return 0;
}

// unique_ptr is the sole owner of a piece of allocated memory, no two unique_ptr
// point to the same piece of memory.

// shared_ptr can share ownership of a piece of allocated memory, mulitple
// pointers can point to the same piece of memory. The memory is deallocated when
// the last shared pointer is pointing to it is destroyed